// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`<MainScreen /> renders correctly 1`] = `
<View
  style={
    {
      "backgroundColor": "black",
      "display": "flex",
      "height": "100%",
    }
  }
>
  <Modal
    animationType="none"
    deviceHeight={null}
    deviceWidth={null}
    hardwareAccelerated={false}
    hideModalContentWhileAnimating={false}
    onBackdropPress={[Function]}
    onModalHide={[Function]}
    onModalWillHide={[Function]}
    onModalWillShow={[Function]}
    onRequestClose={[Function]}
    onSwipeComplete={[Function]}
    onTouchEnd={[Function]}
    onTouchStart={[Function]}
    panResponderThreshold={4}
    scrollHorizontal={false}
    scrollOffset={0}
    scrollOffsetMax={0}
    scrollTo={null}
    statusBarTranslucent={false}
    supportedOrientations={
      [
        "portrait",
        "landscape",
      ]
    }
    swipeDirection={
      [
        "up",
        "down",
        "left",
        "right",
      ]
    }
    swipeThreshold={100}
    transparent={true}
    visible={false}
  />
  <View
    collapsable={false}
    style={
      {
        "backgroundColor": "transparent",
        "borderRadius": 20,
        "marginLeft": "auto",
        "marginTop": 70,
        "shadowColor": "#000",
        "shadowOffset": {
          "height": 0,
          "width": 0,
        },
        "shadowOpacity": 0,
        "shadowRadius": 0,
      }
    }
    testID="button-container-outer-layer"
  >
    <View
      collapsable={false}
      style={
        {
          "backgroundColor": "transparent",
          "borderColor": "transparent",
          "borderRadius": 20,
          "borderStyle": "solid",
          "borderWidth": 0,
          "display": "flex",
          "flex": undefined,
          "minWidth": 64,
          "shadowColor": "#000",
          "shadowOffset": {
            "height": 0,
            "width": 0,
          },
          "shadowOpacity": 0,
          "shadowRadius": 0,
        }
      }
      testID="button-container"
    >
      <View
        accessibilityRole="button"
        accessibilityState={
          {
            "busy": undefined,
            "checked": undefined,
            "disabled": false,
            "expanded": undefined,
            "selected": undefined,
          }
        }
        accessibilityValue={
          {
            "max": undefined,
            "min": undefined,
            "now": undefined,
            "text": undefined,
          }
        }
        accessible={true}
        collapsable={false}
        focusable={true}
        onBlur={[Function]}
        onClick={[Function]}
        onFocus={[Function]}
        onResponderGrant={[Function]}
        onResponderMove={[Function]}
        onResponderRelease={[Function]}
        onResponderTerminate={[Function]}
        onResponderTerminationRequest={[Function]}
        onStartShouldSetResponder={[Function]}
        style={
          [
            {
              "overflow": "hidden",
            },
            {
              "borderRadius": 20,
            },
          ]
        }
        testID="button"
      >
        <View
          style={
            [
              {
                "alignItems": "center",
                "flexDirection": "row",
                "justifyContent": "center",
              },
              undefined,
            ]
          }
        >
          <View
            style={
              [
                {
                  "marginLeft": 12,
                  "marginRight": -4,
                },
                {
                  "marginLeft": 16,
                  "marginRight": -16,
                },
                {
                  "marginLeft": 12,
                  "marginRight": -8,
                },
              ]
            }
            testID="button-icon-container"
          >
            <Text />
          </View>
          <Text
            numberOfLines={1}
            selectable={false}
            style={
              [
                {
                  "fontFamily": "System",
                  "fontSize": 14,
                  "fontWeight": "500",
                  "letterSpacing": 0.1,
                  "lineHeight": 20,
                },
                {
                  "textAlign": "left",
                },
                {
                  "color": "rgba(28, 27, 31, 1)",
                  "writingDirection": "ltr",
                },
                [
                  {
                    "marginHorizontal": 16,
                    "marginVertical": 9,
                    "textAlign": "center",
                  },
                  false,
                  {
                    "marginHorizontal": 16,
                  },
                  undefined,
                  false,
                  {
                    "color": "white",
                    "fontFamily": "System",
                    "fontSize": 14,
                    "fontWeight": "500",
                    "letterSpacing": 0.1,
                    "lineHeight": 20,
                  },
                  undefined,
                ],
              ]
            }
            testID="button-text"
          />
        </View>
      </View>
    </View>
  </View>
  <Text
    style={
      [
        {
          "fontFamily": "System",
          "fontSize": 45,
          "fontWeight": "400",
          "letterSpacing": 0,
          "lineHeight": 52,
        },
        {
          "textAlign": "left",
        },
        {
          "color": "rgba(28, 27, 31, 1)",
          "writingDirection": "ltr",
        },
        {
          "color": "white",
          "display": "flex",
          "fontWeight": "300",
          "marginTop": 10,
          "textAlign": "center",
        },
      ]
    }
  >
    Durum
  </Text>
  <View
    style={
      [
        {
          "backgroundColor": "black",
          "borderRadius": 36,
          "height": 72,
          "width": 72,
        },
        {
          "backgroundColor": "black",
          "marginLeft": "auto",
          "marginRight": "auto",
          "marginTop": 30,
        },
      ]
    }
  >
    <Image
      accessibilityIgnoresInvertColors={true}
      source={1}
      style={
        {
          "borderRadius": 36,
          "height": 72,
          "width": 72,
        }
      }
    />
  </View>
  <Text
    style={
      [
        {
          "fontFamily": "System",
          "fontSize": 22,
          "fontWeight": "400",
          "letterSpacing": 0,
          "lineHeight": 28,
        },
        {
          "textAlign": "left",
        },
        {
          "color": "rgba(28, 27, 31, 1)",
          "writingDirection": "ltr",
        },
        {
          "color": "white",
          "fontWeight": 100,
          "textAlign": "center",
        },
      ]
    }
  >
    100
  </Text>
  <View
    style={
      [
        {
          "backgroundColor": "black",
          "borderRadius": 36,
          "height": 72,
          "width": 72,
        },
        {
          "backgroundColor": "black",
          "marginLeft": "auto",
          "marginRight": "auto",
          "marginTop": 125,
        },
      ]
    }
  >
    <Image
      accessibilityIgnoresInvertColors={true}
      source={1}
      style={
        {
          "borderRadius": 36,
          "height": 72,
          "width": 72,
        }
      }
    />
  </View>
  <Text
    style={
      [
        {
          "fontFamily": "System",
          "fontSize": 22,
          "fontWeight": "400",
          "letterSpacing": 0,
          "lineHeight": 28,
        },
        {
          "textAlign": "left",
        },
        {
          "color": "rgba(28, 27, 31, 1)",
          "writingDirection": "ltr",
        },
        {
          "color": "white",
          "fontWeight": 100,
          "marginTop": 30,
          "textAlign": "center",
        },
      ]
    }
  >
    Ates tespit edildi.
  </Text>
  <View
    pointerEvents="box-none"
    style={
      {
        "alignSelf": "center",
        "height": 250,
        "marginTop": "auto",
        "overflow": "hidden",
        "width": "100%",
      }
    }
  >
    <ViewManagerAdapter_ExpoVideoView
      onError={[Function]}
      onFullscreenUpdate={[Function]}
      onLoad={[Function]}
      onLoadStart={[Function]}
      onReadyForDisplay={[Function]}
      onStatusUpdate={[Function]}
      proxiedProperties={
        {
          "resizeMode": "mock",
          "source": {
            "headers": undefined,
            "overridingExtension": null,
            "uri": "uri",
          },
          "status": {
            "isLooping": true,
            "shouldPlay": true,
            "volume": 0.5,
          },
        }
      }
      style={
        {
          "bottom": 0,
          "left": 0,
          "position": "absolute",
          "right": 0,
          "top": 0,
        }
      }
      videoStyle={
        {
          "bottom": 0,
          "left": 0,
          "position": "absolute",
          "right": 0,
          "top": 0,
        }
      }
    />
  </View>
</View>
`;
